Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
phase2_start_service_processes() called -- currently a NOP
phase3_start_service_processes() called -- currently a NOP
phase4_start_service_processes() called -- currently a NOP
phase5_start_service_processes() called -- currently a NOP
Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
testcase_main(): started
EXPECTATION: main creates XXp1; XXp1 creates a pair of XXp2 procs; join() each parent with all its children.  (children are always higher priority than parents, in this testcase)
Phase 1A TEMPORARY HACK: Manually switching to XXp1()
XXp1(): started
XXp1(): arg = 'XXp1'
XXp1(): executing spork of first child
Phase 1A TEMPORARY HACK: Manually switching to the first XXp2()
XXp2(): started
XXp2(): arg = 'XXp2'
XXp2(): This XXp2() process will now quit().
XXp1(): spork of first child returned pid = 4 -- you should not see this until the first XXp2 process has completed.
XXp1(): executing spork of second child -- this happens after the first XXp2 process has completed, but before we've done a join() on it.
Phase 1A TEMPORARY HACK: Manually switching to the first XXp2()
XXp2(): started
XXp2(): arg = 'XXp2'
XXp2(): This XXp2() process will now quit().
XXp1(): spork of second child returned pid = 5 -- you should not see this until the second XXp2 process has completed.
XXp1(): first join returned kidpid = 5, status = 5
XXp1(): second join returned kidpid = 4, status = 5
testcase_main(): after spork of child 3 -- you should not see this until XXp1, and both of the XXp2 processes, have completed.
testcase_main(): performing join
testcase_main(): exit status for child 3 is 3
Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
finish(): The simulation is now terminating.
